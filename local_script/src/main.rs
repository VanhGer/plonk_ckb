//! Generated by capsule
//!
//! `main.rs` is used to define rust lang items and modules.
//! See `entry.rs` for the `main` function.
//! See `error.rs` for the `Error` type.

#![feature(lang_items)]
#![feature(alloc_error_handler)]
#![feature(panic_info_message)]
#![no_std]
#![cfg_attr(not(test), no_main)]
#[cfg(test)]
extern crate alloc;

use alloc::vec::Vec;

use ark_serialize::CanonicalDeserialize;
use ckb_std::ckb_constants::Source;
use ckb_std::debug;
#[cfg(not(test))]
use ckb_std::default_alloc;
use ckb_std::high_level::load_cell_data;
use sha2::Sha256;

use crate::common_preprocessed_input_const::COMMON_PREPROCESSED_INPUT;
use crate::data_structures::{CommonPreprocessedInput, Proof, Srs};
use crate::error::Error;
use crate::srs_const::SRS;

#[cfg(not(test))]
ckb_std::entry!(program_entry);
#[cfg(not(test))]
default_alloc!();

// define modules
mod error;
mod data_structures;
mod verify;
mod srs_const;
mod challenge;
mod common_preprocessed_input_const;


/// program entry
fn program_entry() -> i8 {
    debug!("load proof_data!");
    let proof_data = match load_cell_data(0, Source::Output) {
        Ok(data) => data,
        Err(_) => return Error::LoadingCell as i8,
    };
    debug!("proof_data is {:?}", proof_data.len());

    debug!("deserialize proof!");
    let proof = match Proof::deserialize_compressed_unchecked(&proof_data[..]) {
        Ok(data) => data,
        Err(_) => return Error::Encoding as i8,
    };
    //
    debug!("deserialize cpi");
    let cpi_const = Vec::<u8>::from(COMMON_PREPROCESSED_INPUT);
    let cpi = match CommonPreprocessedInput::deserialize_compressed_unchecked(&cpi_const[..]) {
        Ok(data) => data,
        Err(_) => return Error::Encoding as i8,
    };

    // return 0;

    let new_s = Vec::<u8>::from(SRS);
    let srs = Srs::deserialize_compressed(&new_s[..]).unwrap();
    //
    // verify::plonk_verify::<Sha256>(proof, cpiun )

    // Call main function and return error code
    match verify::plonk_verify::<Sha256>(proof, cpi, srs) {
        Ok(_) => 0,
        Err(err) => err as i8,
    }
    // 0
}
