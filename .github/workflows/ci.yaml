name: Continuous Integration

on:
  push:
    branches:
      - main

jobs:
  release-github-artifact:
    name: Release Packaging
    env:
      PROJECT_NAME_UNDERSCORE: rust-server
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [ cargo-check, fmt-check, test-and-coverage ]
    steps:
      - name: Check out from Git
        uses: actions/checkout@v4

      - name: Grant permission to run command
        run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

      - name: Check if Git tag exists
        run: echo "::set-env name=HEAD_TAG::$(git tag --points-at HEAD)"

      - name: Skip if Git tag does not exist
        if: steps.check-tag.outputs.HEAD_TAG == ''
        run: exit 0 # Exit with success, effectively skipping subsequent steps

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Release Build
        run: cargo build --release --all

      - name: "Upload Artifact"
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PROJECT_NAME_UNDERSCORE }}
          path: target/release/cli

  release-docker-image:
    env:
      DOCKER_HUB_REPOSITORY: ckbrollup/zkp_ckb_toolkit
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [cargo-check, fmt-check, test-and-coverage]
    steps:
      - name: Check out from Git
        uses: actions/checkout@v4

      - name: Grant permission to run command
        run: echo 'ACTIONS_ALLOW_UNSECURE_COMMANDS=true' >> $GITHUB_ENV

      - name: Check if Git tag exists
        run: echo "::set-env name=HEAD_TAG::$(git tag --points-at HEAD)"

      - name: Skip if Git tag does not exist
        if: steps.check-tag.outputs.HEAD_TAG == ''
        run: exit 0 # Exit with success, effectively skipping subsequent steps

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push docker image
        run: |
          docker build . --tag ${{ env.DOCKER_HUB_REPOSITORY }}:latest
          docker push ${{ env.DOCKER_HUB_REPOSITORY }}:latest